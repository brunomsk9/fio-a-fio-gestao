# Script de Deploy para Digital Ocean - PowerShell
# Uso: .\deploy-digitalocean.ps1 [easypanel|docker|manual]

param(
    [Parameter(Position=0)]
    [ValidateSet("easypanel", "docker", "compose", "manual")]
    [string]$DeployType = "easypanel"
)

# Configura√ß√µes
$ErrorActionPreference = "Stop"

# Fun√ß√µes de log
function Write-Log {
    param([string]$Message, [string]$Color = "Green")
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    Write-Host "[$timestamp] $Message" -ForegroundColor $Color
}

function Write-Error {
    param([string]$Message)
    Write-Log "ERRO: $Message" "Red"
    exit 1
}

function Write-Warning {
    param([string]$Message)
    Write-Log "AVISO: $Message" "Yellow"
}

function Write-Info {
    param([string]$Message)
    Write-Log "INFO: $Message" "Blue"
}

# Verificar se est√° no diret√≥rio correto
if (-not (Test-Path "package.json")) {
    Write-Error "Execute este script no diret√≥rio raiz do projeto"
}

# Verificar Node.js
try {
    $nodeVersion = node --version
    Write-Log "Node.js encontrado: $nodeVersion"
    
    # Extrair vers√£o principal
    $majorVersion = [int]($nodeVersion -replace 'v(\d+)\.\d+\.\d+', '$1')
    if ($majorVersion -lt 18) {
        Write-Error "Node.js 18+ √© necess√°rio. Vers√£o atual: $nodeVersion"
    }
} catch {
    Write-Error "Node.js n√£o est√° instalado"
}

# Verificar vari√°veis de ambiente
$supabaseUrl = $env:VITE_SUPABASE_URL
$supabaseKey = $env:VITE_SUPABASE_ANON_KEY

if (-not $supabaseUrl -or -not $supabaseKey) {
    Write-Warning "Vari√°veis de ambiente do Supabase n√£o encontradas"
    Write-Info "Configure VITE_SUPABASE_URL e VITE_SUPABASE_ANON_KEY"
}

# Fun√ß√£o para deploy EasyPanel
function Deploy-EasyPanel {
    Write-Log "Iniciando deploy via EasyPanel..."
    
    # Build da aplica√ß√£o
    Write-Log "Fazendo build da aplica√ß√£o..."
    try {
        npm run build
        Write-Log "Build conclu√≠do com sucesso!"
    } catch {
        Write-Error "Falha no build da aplica√ß√£o"
    }
    
    # Verificar se o diret√≥rio dist foi criado
    if (-not (Test-Path "dist")) {
        Write-Error "Diret√≥rio dist n√£o foi criado"
    }
    
    Write-Log "Deploy via EasyPanel conclu√≠do!"
    Write-Info "Acesse o painel do EasyPanel para finalizar a configura√ß√£o"
}

# Fun√ß√£o para deploy Docker
function Deploy-Docker {
    Write-Log "Iniciando deploy via Docker..."
    
    # Verificar se Docker est√° instalado
    try {
        docker --version | Out-Null
        Write-Log "Docker encontrado"
    } catch {
        Write-Error "Docker n√£o est√° instalado"
    }
    
    # Build da imagem
    Write-Log "Construindo imagem Docker..."
    try {
        docker build -t barbearia-app .
        Write-Log "Imagem Docker constru√≠da com sucesso!"
    } catch {
        Write-Error "Falha na constru√ß√£o da imagem Docker"
    }
    
    # Parar container anterior se existir
    $existingContainer = docker ps -a --filter "name=barbearia-app" --format "{{.Names}}"
    if ($existingContainer) {
        Write-Log "Parando container anterior..."
        docker stop barbearia-app 2>$null
        docker rm barbearia-app 2>$null
    }
    
    # Executar novo container
    Write-Log "Executando novo container..."
    try {
        docker run -d `
            --name barbearia-app `
            --restart unless-stopped `
            -p 80:80 `
            -e "VITE_SUPABASE_URL=$supabaseUrl" `
            -e "VITE_SUPABASE_ANON_KEY=$supabaseKey" `
            barbearia-app
        
        Write-Log "Container iniciado com sucesso!"
        Write-Info "Aplica√ß√£o dispon√≠vel em: http://localhost"
    } catch {
        Write-Error "Falha ao iniciar container"
    }
}

# Fun√ß√£o para deploy manual
function Deploy-Manual {
    Write-Log "Iniciando deploy manual..."
    
    # Instalar depend√™ncias
    Write-Log "Instalando depend√™ncias..."
    try {
        npm ci --only=production
        Write-Log "Depend√™ncias instaladas"
    } catch {
        Write-Error "Falha ao instalar depend√™ncias"
    }
    
    # Build da aplica√ß√£o
    Write-Log "Fazendo build da aplica√ß√£o..."
    try {
        npm run build
        Write-Log "Build conclu√≠do com sucesso!"
    } catch {
        Write-Error "Falha no build da aplica√ß√£o"
    }
    
    # Verificar se o diret√≥rio dist foi criado
    if (-not (Test-Path "dist")) {
        Write-Error "Diret√≥rio dist n√£o foi criado"
    }
    
    Write-Log "Deploy manual conclu√≠do!"
    Write-Info "Copie o conte√∫do da pasta dist para seu servidor web"
}

# Fun√ß√£o para deploy com Docker Compose
function Deploy-Compose {
    Write-Log "Iniciando deploy via Docker Compose..."
    
    # Verificar se Docker Compose est√° instalado
    try {
        docker-compose --version | Out-Null
        Write-Log "Docker Compose encontrado"
    } catch {
        Write-Error "Docker Compose n√£o est√° instalado"
    }
    
    # Criar arquivo .env se n√£o existir
    if (-not (Test-Path ".env")) {
        Write-Warning "Arquivo .env n√£o encontrado"
        Write-Info "Criando arquivo .env com vari√°veis de exemplo..."
        
        $envContent = @"
VITE_SUPABASE_URL=sua_url_do_supabase
VITE_SUPABASE_ANON_KEY=sua_chave_anonima_do_supabase
NODE_ENV=production
"@
        
        $envContent | Out-File -FilePath ".env" -Encoding UTF8
        Write-Warning "Configure as vari√°veis no arquivo .env"
    }
    
    # Executar Docker Compose
    Write-Log "Executando Docker Compose..."
    try {
        docker-compose up -d --build
        Write-Log "Docker Compose executado com sucesso!"
        Write-Info "Aplica√ß√£o dispon√≠vel em: http://localhost"
    } catch {
        Write-Error "Falha ao executar Docker Compose"
    }
}

# Menu principal
switch ($DeployType) {
    "easypanel" {
        Deploy-EasyPanel
    }
    "docker" {
        Deploy-Docker
    }
    "compose" {
        Deploy-Compose
    }
    "manual" {
        Deploy-Manual
    }
    default {
        Write-Host "Uso: .\deploy-digitalocean.ps1 [easypanel|docker|compose|manual]"
        Write-Host ""
        Write-Host "Op√ß√µes:"
        Write-Host "  easypanel  - Deploy via EasyPanel (recomendado)"
        Write-Host "  docker     - Deploy via Docker"
        Write-Host "  compose    - Deploy via Docker Compose"
        Write-Host "  manual     - Deploy manual (apenas build)"
        exit 1
    }
}

Write-Log "Deploy conclu√≠do com sucesso! üéâ" 